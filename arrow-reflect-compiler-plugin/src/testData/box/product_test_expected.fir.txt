FILE: module_main_product_test_expected.kt
    package test

    public final data class Sample : R|kotlin/Any| {
        public constructor(foo: R|kotlin/Int|, bar: R|kotlin/String|): R|test/Sample| {
            super<R|kotlin/Any|>()
        }

        public final val foo: R|kotlin/Int| = R|<local>/foo|
            public get(): R|kotlin/Int|

        public final val bar: R|kotlin/String| = R|<local>/bar|
            public get(): R|kotlin/String|

        public final fun product(): R|kotlin/collections/List<ERROR CLASS: Symbol not found for Pair<kotlin/String, *>>| {
            ^product <Unresolved name: listOf>#(String(foo).<Unresolved name: to>#(this@R|test/Sample|.R|test/Sample.foo|), String(bar).<Unresolved name: to>#(this@R|test/Sample|.R|test/Sample.bar|))
        }

        public final operator fun component1(): R|kotlin/Int|

        public final operator fun component2(): R|kotlin/String|

        public final fun copy(foo: R|kotlin/Int| = this@R|test/Sample|.R|test/Sample.foo|, bar: R|kotlin/String| = this@R|test/Sample|.R|test/Sample.bar|): R|test/Sample|

    }
    public final fun box(): R|kotlin/String| {
        lval x: R|kotlin/collections/List<ERROR CLASS: Symbol not found for Pair<kotlin/String, *>>| = R|test/Sample.Sample|(Int(0), String(abc)).R|test/Sample.product|()
        ^box when () {
            ==(R|<local>/x|, <Unresolved name: listOf>#(String(foo).<Unresolved name: to>#(Int(0)), String(bar).<Unresolved name: to>#(String(abc)))) ->  {
                String(OK)
            }
            else ->  {
                String(Fail)
            }
        }

    }
